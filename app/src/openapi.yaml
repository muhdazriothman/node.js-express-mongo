openapi: 3.0.2

info:
  title: Freelance API
  description: >
    Specification for endpoints that covers creating, viewing, updating and cancelling user
  version: 1.0.0
  
servers: 
  - url: https://freelance-svc/api/v1.0
    description: Live demo of the API
  - url: http://localhost:5050/api/v1.0
    description: Local testing of the API
      
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  parameters:
    Id:
      name: Id
      description: Unique id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    
  schemas:   
    Id:
      title: Schema for Id
      type: string
      minLength: 24
      maxLength: 24

    createUser:
      title: Schema for user creation
      type: object
      properties:
        username:
          type: string
          description: Username
          minLength: 3
        email:
          type: string
          description: Email
          format: email
          minLength: 3
        phoneNo: 
          type: string
          description: Phone Number
        skills:
          type: array
          description: List of skills
          minItems: 1
          uniqueItems: true
          items:
            type: string
            description: Skill description
        hobbies:
          type: array
          description: List of hobbies
          uniqueItems: true
          items:
            type: string
            description: Hobby description
      additionalProperties: false    
      required: 
        - username
        - email
        - phoneNo
        - skills
        - hobbies
        
    updateUser:
      title: Schema for user update
      type: object
      properties:
        username:
          type: string
          description: Username
          minLength: 3
        phoneNo: 
          type: string
          description: Phone Number
        skills:
          type: array
          description: List of skills
          minItems: 1
          uniqueItems: true
          items:
            type: string
            description: Skill description
        hobbies:
          type: array
          description: List of hobbies
          uniqueItems: true
          items:
            type: string
            description: Hobby description
        version:
          type: integer
          description: Record version
      additionalProperties: false    
      required: 
        - username
        - phoneNo
        - skills
        - hobbies

    getUserById:
      title: Schema for user retrieval by id
      type: object
      properties:
        _id:
          type: string
          description: User id
        username:
          type: string
          description: Username
        email:
          type: string
          description: Email
          format: email
        phoneNo: 
          type: string
          description: Phone Number
        skills:
          type: array
          description: List of skills
          items:
            type: string
            description: Skill description
        hobbies:
          type: array
          description: List of hobbies
          items:
            type: string
            description: Hobby description
            
    getAllUser:
      title: Schema for all user retrieval
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/getUserById'

paths:
  '/user':
    post:
      summary: Creates a new user
      tags:
        - user
      security:
        - BearerAuth:
          - create-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserById'
        '401':
          description: Not authenticated
        '403':
          description: Not authorized
        '500':
          description: Internal server error
        '504':
          description: Gateway timeout
          
    get:
      summary: Get all users
      tags:
        - user
      security:
        - BearerAuth:
          - get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllUser'
        '204':
          description: No content
        '401':
          description: Not authenticated
        '403':
          description: Not authorized
        '500':
          description: Internal server error
        '504':
          description: Gateway timeout
          
            
  '/user/{Id}':
    get:
      summary: Get user with given id 
      tags:
        - user
      security:
        - BearerAuth:
          - update-user
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserById'
        '401':
          description: Not authenticated
        '403':
          description: Not authorized
        '404':
          description: Not found
        '500':
          description: Internal server error
        '504':
          description: Gateway timeout
          
          
    put:
      summary: Updates user with given id 
      tags:
        - user
      security:
        - BearerAuth:
          - update-user
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserById'
        '401':
          description: Not authenticated
        '403':
          description: Not authorized
        '404':
          description: Not found
        '500':
          description: Internal server error
        '504':
          description: Gateway timeout
          
    delete:
      summary: Delete user with given id 
      tags:
        - user
      security:
        - BearerAuth:
          - delete-user
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: OK
        '401':
          description: Not authenticated
        '403':
          description: Not authorized
        '404':
          description: Not found
        '500':
          description: Internal server error
        '504':
          description: Gateway timeout
